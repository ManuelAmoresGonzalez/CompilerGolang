//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/ProyectoCompiladores/Grammar\MiniGoParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Generated {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMiniGoParserVisitor{Result}"/>,
/// which can be extended to create a visitor which only needs to handle a subset
/// of the available methods.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class MiniGoParserBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, IMiniGoParserVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>main</c>
	/// labeled alternative in <see cref="MiniGoParser.root"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMain([NotNull] MiniGoParser.MainContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>estructuraProyecto</c>
	/// labeled alternative in <see cref="MiniGoParser.topDeclarationList"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEstructuraProyecto([NotNull] MiniGoParser.EstructuraProyectoContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>variableDeclFormal</c>
	/// labeled alternative in <see cref="MiniGoParser.variableDecl"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitVariableDeclFormal([NotNull] MiniGoParser.VariableDeclFormalContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>variableDeclCombinada</c>
	/// labeled alternative in <see cref="MiniGoParser.variableDecl"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitVariableDeclCombinada([NotNull] MiniGoParser.VariableDeclCombinadaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>variableDeclVacia</c>
	/// labeled alternative in <see cref="MiniGoParser.variableDecl"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitVariableDeclVacia([NotNull] MiniGoParser.VariableDeclVaciaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>declararVariablesInternas</c>
	/// labeled alternative in <see cref="MiniGoParser.innerVarDecls"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDeclararVariablesInternas([NotNull] MiniGoParser.DeclararVariablesInternasContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>singleVarDeclAsign</c>
	/// labeled alternative in <see cref="MiniGoParser.singleVarDecl"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSingleVarDeclAsign([NotNull] MiniGoParser.SingleVarDeclAsignContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>singleVarDeclAsignExpL</c>
	/// labeled alternative in <see cref="MiniGoParser.singleVarDecl"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSingleVarDeclAsignExpL([NotNull] MiniGoParser.SingleVarDeclAsignExpLContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>singleVarDeclNull</c>
	/// labeled alternative in <see cref="MiniGoParser.singleVarDecl"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSingleVarDeclNull([NotNull] MiniGoParser.SingleVarDeclNullContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>asignarVariableSinValor</c>
	/// labeled alternative in <see cref="MiniGoParser.singleVarDeclNoExps"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitAsignarVariableSinValor([NotNull] MiniGoParser.AsignarVariableSinValorContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>typeDeclUnico</c>
	/// labeled alternative in <see cref="MiniGoParser.typeDecl"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTypeDeclUnico([NotNull] MiniGoParser.TypeDeclUnicoContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>typeDeclVarios</c>
	/// labeled alternative in <see cref="MiniGoParser.typeDecl"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTypeDeclVarios([NotNull] MiniGoParser.TypeDeclVariosContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>typeDeclVacio</c>
	/// labeled alternative in <see cref="MiniGoParser.typeDecl"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTypeDeclVacio([NotNull] MiniGoParser.TypeDeclVacioContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>declaracionInterna</c>
	/// labeled alternative in <see cref="MiniGoParser.innerTypeDecls"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDeclaracionInterna([NotNull] MiniGoParser.DeclaracionInternaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>identificadorTipo</c>
	/// labeled alternative in <see cref="MiniGoParser.singleTypeDecl"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitIdentificadorTipo([NotNull] MiniGoParser.IdentificadorTipoContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>estructuraFuncion</c>
	/// labeled alternative in <see cref="MiniGoParser.funcDecl"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEstructuraFuncion([NotNull] MiniGoParser.EstructuraFuncionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>declararFuncion</c>
	/// labeled alternative in <see cref="MiniGoParser.funcFrontDecl"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDeclararFuncion([NotNull] MiniGoParser.DeclararFuncionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>parametrosFuncion</c>
	/// labeled alternative in <see cref="MiniGoParser.funcArgDecls"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitParametrosFuncion([NotNull] MiniGoParser.ParametrosFuncionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>declTypeParentesis</c>
	/// labeled alternative in <see cref="MiniGoParser.declType"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDeclTypeParentesis([NotNull] MiniGoParser.DeclTypeParentesisContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>declTypeIdentificador</c>
	/// labeled alternative in <see cref="MiniGoParser.declType"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDeclTypeIdentificador([NotNull] MiniGoParser.DeclTypeIdentificadorContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>declTypeDeclaracionSimple</c>
	/// labeled alternative in <see cref="MiniGoParser.declType"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDeclTypeDeclaracionSimple([NotNull] MiniGoParser.DeclTypeDeclaracionSimpleContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>declTypeDeclaracionArreglo</c>
	/// labeled alternative in <see cref="MiniGoParser.declType"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDeclTypeDeclaracionArreglo([NotNull] MiniGoParser.DeclTypeDeclaracionArregloContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>declTypeEstructuraDecTipo</c>
	/// labeled alternative in <see cref="MiniGoParser.declType"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDeclTypeEstructuraDecTipo([NotNull] MiniGoParser.DeclTypeEstructuraDecTipoContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>declaracionVacia</c>
	/// labeled alternative in <see cref="MiniGoParser.sliceDeclType"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDeclaracionVacia([NotNull] MiniGoParser.DeclaracionVaciaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>declaracionInt</c>
	/// labeled alternative in <see cref="MiniGoParser.arrayDeclType"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDeclaracionInt([NotNull] MiniGoParser.DeclaracionIntContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>estructuraLlaves</c>
	/// labeled alternative in <see cref="MiniGoParser.structDeclType"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEstructuraLlaves([NotNull] MiniGoParser.EstructuraLlavesContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>partesCodigo</c>
	/// labeled alternative in <see cref="MiniGoParser.structMemDecls"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPartesCodigo([NotNull] MiniGoParser.PartesCodigoContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>listarIdentificadores</c>
	/// labeled alternative in <see cref="MiniGoParser.identifierList"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitListarIdentificadores([NotNull] MiniGoParser.ListarIdentificadoresContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionMenorIgual</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionMenorIgual([NotNull] MiniGoParser.ExpressionMenorIgualContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionAsterisco</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionAsterisco([NotNull] MiniGoParser.ExpressionAsteriscoContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionCorrimientoDerecha</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionCorrimientoDerecha([NotNull] MiniGoParser.ExpressionCorrimientoDerechaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionLand</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionLand([NotNull] MiniGoParser.ExpressionLandContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionMayorIgual</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionMayorIgual([NotNull] MiniGoParser.ExpressionMayorIgualContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNotExpression([NotNull] MiniGoParser.NotExpressionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionMayor</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionMayor([NotNull] MiniGoParser.ExpressionMayorContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionEqual</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionEqual([NotNull] MiniGoParser.ExpressionEqualContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionMas</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionMas([NotNull] MiniGoParser.ExpressionMasContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionSlash</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionSlash([NotNull] MiniGoParser.ExpressionSlashContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionDisyuncionExclusi</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionDisyuncionExclusi([NotNull] MiniGoParser.ExpressionDisyuncionExclusiContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>masExpression</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMasExpression([NotNull] MiniGoParser.MasExpressionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionAndNOt</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionAndNOt([NotNull] MiniGoParser.ExpressionAndNOtContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionPrimaryExpression</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionPrimaryExpression([NotNull] MiniGoParser.ExpressionPrimaryExpressionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionAnd</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionAnd([NotNull] MiniGoParser.ExpressionAndContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionCorrimientoIzqui</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionCorrimientoIzqui([NotNull] MiniGoParser.ExpressionCorrimientoIzquiContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionNotEqual</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionNotEqual([NotNull] MiniGoParser.ExpressionNotEqualContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>menosExpression</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMenosExpression([NotNull] MiniGoParser.MenosExpressionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>disyuncionExpression</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDisyuncionExpression([NotNull] MiniGoParser.DisyuncionExpressionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionPorcentaje</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionPorcentaje([NotNull] MiniGoParser.ExpressionPorcentajeContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionOr</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionOr([NotNull] MiniGoParser.ExpressionOrContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionMenor</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionMenor([NotNull] MiniGoParser.ExpressionMenorContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionMenos</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionMenos([NotNull] MiniGoParser.ExpressionMenosContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionLor</c>
	/// labeled alternative in <see cref="MiniGoParser.expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionLor([NotNull] MiniGoParser.ExpressionLorContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionListExpression</c>
	/// labeled alternative in <see cref="MiniGoParser.expressionList"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpressionListExpression([NotNull] MiniGoParser.ExpressionListExpressionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>primaryExpressionSelector</c>
	/// labeled alternative in <see cref="MiniGoParser.primaryExpression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPrimaryExpressionSelector([NotNull] MiniGoParser.PrimaryExpressionSelectorContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>primaryExpressionCap</c>
	/// labeled alternative in <see cref="MiniGoParser.primaryExpression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPrimaryExpressionCap([NotNull] MiniGoParser.PrimaryExpressionCapContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>primaryExpressionOperand</c>
	/// labeled alternative in <see cref="MiniGoParser.primaryExpression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPrimaryExpressionOperand([NotNull] MiniGoParser.PrimaryExpressionOperandContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>primaryExpressionAppend</c>
	/// labeled alternative in <see cref="MiniGoParser.primaryExpression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPrimaryExpressionAppend([NotNull] MiniGoParser.PrimaryExpressionAppendContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>primaryExpressionArguments</c>
	/// labeled alternative in <see cref="MiniGoParser.primaryExpression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPrimaryExpressionArguments([NotNull] MiniGoParser.PrimaryExpressionArgumentsContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>primaryExpressionIndex</c>
	/// labeled alternative in <see cref="MiniGoParser.primaryExpression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPrimaryExpressionIndex([NotNull] MiniGoParser.PrimaryExpressionIndexContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>primaryExpressionLenght</c>
	/// labeled alternative in <see cref="MiniGoParser.primaryExpression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPrimaryExpressionLenght([NotNull] MiniGoParser.PrimaryExpressionLenghtContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>operandoLiteral</c>
	/// labeled alternative in <see cref="MiniGoParser.operand"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitOperandoLiteral([NotNull] MiniGoParser.OperandoLiteralContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>operandoIdentificador</c>
	/// labeled alternative in <see cref="MiniGoParser.operand"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitOperandoIdentificador([NotNull] MiniGoParser.OperandoIdentificadorContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>operandoExpresion</c>
	/// labeled alternative in <see cref="MiniGoParser.operand"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitOperandoExpresion([NotNull] MiniGoParser.OperandoExpresionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>literalLit</c>
	/// labeled alternative in <see cref="MiniGoParser.literal"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLiteralLit([NotNull] MiniGoParser.LiteralLitContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>literalFloat</c>
	/// labeled alternative in <see cref="MiniGoParser.literal"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLiteralFloat([NotNull] MiniGoParser.LiteralFloatContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>literalRune</c>
	/// labeled alternative in <see cref="MiniGoParser.literal"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLiteralRune([NotNull] MiniGoParser.LiteralRuneContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>literalRaw</c>
	/// labeled alternative in <see cref="MiniGoParser.literal"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLiteralRaw([NotNull] MiniGoParser.LiteralRawContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>literalInterpreted</c>
	/// labeled alternative in <see cref="MiniGoParser.literal"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLiteralInterpreted([NotNull] MiniGoParser.LiteralInterpretedContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>indexTipo</c>
	/// labeled alternative in <see cref="MiniGoParser.index"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitIndexTipo([NotNull] MiniGoParser.IndexTipoContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>argumentos</c>
	/// labeled alternative in <see cref="MiniGoParser.arguments"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitArgumentos([NotNull] MiniGoParser.ArgumentosContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>selectorPunto</c>
	/// labeled alternative in <see cref="MiniGoParser.selector"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSelectorPunto([NotNull] MiniGoParser.SelectorPuntoContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expresionAppend</c>
	/// labeled alternative in <see cref="MiniGoParser.appendExpression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpresionAppend([NotNull] MiniGoParser.ExpresionAppendContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expresionLen</c>
	/// labeled alternative in <see cref="MiniGoParser.lengthExpression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpresionLen([NotNull] MiniGoParser.ExpresionLenContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expresionCap</c>
	/// labeled alternative in <see cref="MiniGoParser.capExpression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpresionCap([NotNull] MiniGoParser.ExpresionCapContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>listaDeclaraciones</c>
	/// labeled alternative in <see cref="MiniGoParser.statementList"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitListaDeclaraciones([NotNull] MiniGoParser.ListaDeclaracionesContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>estructuraBlock</c>
	/// labeled alternative in <see cref="MiniGoParser.block"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEstructuraBlock([NotNull] MiniGoParser.EstructuraBlockContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>funcionImprimir</c>
	/// labeled alternative in <see cref="MiniGoParser.statement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFuncionImprimir([NotNull] MiniGoParser.FuncionImprimirContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>funcionImprimirLn</c>
	/// labeled alternative in <see cref="MiniGoParser.statement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFuncionImprimirLn([NotNull] MiniGoParser.FuncionImprimirLnContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>funcionRetornar</c>
	/// labeled alternative in <see cref="MiniGoParser.statement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFuncionRetornar([NotNull] MiniGoParser.FuncionRetornarContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>funcionBreak</c>
	/// labeled alternative in <see cref="MiniGoParser.statement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFuncionBreak([NotNull] MiniGoParser.FuncionBreakContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>funcionContinuar</c>
	/// labeled alternative in <see cref="MiniGoParser.statement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFuncionContinuar([NotNull] MiniGoParser.FuncionContinuarContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expresionSimple</c>
	/// labeled alternative in <see cref="MiniGoParser.statement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpresionSimple([NotNull] MiniGoParser.ExpresionSimpleContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>funcionBlock</c>
	/// labeled alternative in <see cref="MiniGoParser.statement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFuncionBlock([NotNull] MiniGoParser.FuncionBlockContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>funcionSwitch</c>
	/// labeled alternative in <see cref="MiniGoParser.statement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFuncionSwitch([NotNull] MiniGoParser.FuncionSwitchContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>funcionIf</c>
	/// labeled alternative in <see cref="MiniGoParser.statement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFuncionIf([NotNull] MiniGoParser.FuncionIfContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>funcionLoop</c>
	/// labeled alternative in <see cref="MiniGoParser.statement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFuncionLoop([NotNull] MiniGoParser.FuncionLoopContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>declararTipos</c>
	/// labeled alternative in <see cref="MiniGoParser.statement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDeclararTipos([NotNull] MiniGoParser.DeclararTiposContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>declararVariables</c>
	/// labeled alternative in <see cref="MiniGoParser.statement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDeclararVariables([NotNull] MiniGoParser.DeclararVariablesContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>funcionEpsilon1</c>
	/// labeled alternative in <see cref="MiniGoParser.simpleStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFuncionEpsilon1([NotNull] MiniGoParser.FuncionEpsilon1Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>decrementoIncremento</c>
	/// labeled alternative in <see cref="MiniGoParser.simpleStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDecrementoIncremento([NotNull] MiniGoParser.DecrementoIncrementoContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>declararAsignacion</c>
	/// labeled alternative in <see cref="MiniGoParser.simpleStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDeclararAsignacion([NotNull] MiniGoParser.DeclararAsignacionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>sentenciaDefinir</c>
	/// labeled alternative in <see cref="MiniGoParser.simpleStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSentenciaDefinir([NotNull] MiniGoParser.SentenciaDefinirContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>primerAsignacion</c>
	/// labeled alternative in <see cref="MiniGoParser.assignmentStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPrimerAsignacion([NotNull] MiniGoParser.PrimerAsignacionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>segundaAsignacion</c>
	/// labeled alternative in <see cref="MiniGoParser.assignmentStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSegundaAsignacion([NotNull] MiniGoParser.SegundaAsignacionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>tercerAsignacion</c>
	/// labeled alternative in <see cref="MiniGoParser.assignmentStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTercerAsignacion([NotNull] MiniGoParser.TercerAsignacionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>cuartaAsignacion</c>
	/// labeled alternative in <see cref="MiniGoParser.assignmentStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCuartaAsignacion([NotNull] MiniGoParser.CuartaAsignacionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>quintaAsignacion</c>
	/// labeled alternative in <see cref="MiniGoParser.assignmentStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitQuintaAsignacion([NotNull] MiniGoParser.QuintaAsignacionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>sextaAsignacion</c>
	/// labeled alternative in <see cref="MiniGoParser.assignmentStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSextaAsignacion([NotNull] MiniGoParser.SextaAsignacionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>setimaAsignacion</c>
	/// labeled alternative in <see cref="MiniGoParser.assignmentStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSetimaAsignacion([NotNull] MiniGoParser.SetimaAsignacionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>octavaAsignacion</c>
	/// labeled alternative in <see cref="MiniGoParser.assignmentStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitOctavaAsignacion([NotNull] MiniGoParser.OctavaAsignacionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>novenaAsignacion</c>
	/// labeled alternative in <see cref="MiniGoParser.assignmentStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNovenaAsignacion([NotNull] MiniGoParser.NovenaAsignacionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>decimaAsignacion</c>
	/// labeled alternative in <see cref="MiniGoParser.assignmentStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDecimaAsignacion([NotNull] MiniGoParser.DecimaAsignacionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>undecimaAsignacion</c>
	/// labeled alternative in <see cref="MiniGoParser.assignmentStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitUndecimaAsignacion([NotNull] MiniGoParser.UndecimaAsignacionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>duodecimaAsignacion</c>
	/// labeled alternative in <see cref="MiniGoParser.assignmentStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDuodecimaAsignacion([NotNull] MiniGoParser.DuodecimaAsignacionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>primerIf</c>
	/// labeled alternative in <see cref="MiniGoParser.ifStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPrimerIf([NotNull] MiniGoParser.PrimerIfContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>segundoIf</c>
	/// labeled alternative in <see cref="MiniGoParser.ifStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSegundoIf([NotNull] MiniGoParser.SegundoIfContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>tercerIf</c>
	/// labeled alternative in <see cref="MiniGoParser.ifStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTercerIf([NotNull] MiniGoParser.TercerIfContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>cuartoIf</c>
	/// labeled alternative in <see cref="MiniGoParser.ifStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCuartoIf([NotNull] MiniGoParser.CuartoIfContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>quintoIf</c>
	/// labeled alternative in <see cref="MiniGoParser.ifStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitQuintoIf([NotNull] MiniGoParser.QuintoIfContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>sextoIf</c>
	/// labeled alternative in <see cref="MiniGoParser.ifStatement"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSextoIf([NotNull] MiniGoParser.SextoIfContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>primerFor</c>
	/// labeled alternative in <see cref="MiniGoParser.loop"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPrimerFor([NotNull] MiniGoParser.PrimerForContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>segundoFor</c>
	/// labeled alternative in <see cref="MiniGoParser.loop"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSegundoFor([NotNull] MiniGoParser.SegundoForContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>tercerFor</c>
	/// labeled alternative in <see cref="MiniGoParser.loop"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTercerFor([NotNull] MiniGoParser.TercerForContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>cuartoFor</c>
	/// labeled alternative in <see cref="MiniGoParser.loop"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCuartoFor([NotNull] MiniGoParser.CuartoForContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>primerSwitch</c>
	/// labeled alternative in <see cref="MiniGoParser.switch"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPrimerSwitch([NotNull] MiniGoParser.PrimerSwitchContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>segundoSwitch</c>
	/// labeled alternative in <see cref="MiniGoParser.switch"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSegundoSwitch([NotNull] MiniGoParser.SegundoSwitchContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>tecerSwitch</c>
	/// labeled alternative in <see cref="MiniGoParser.switch"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTecerSwitch([NotNull] MiniGoParser.TecerSwitchContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>cuartoSwitch</c>
	/// labeled alternative in <see cref="MiniGoParser.switch"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCuartoSwitch([NotNull] MiniGoParser.CuartoSwitchContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>funcionEpsilon</c>
	/// labeled alternative in <see cref="MiniGoParser.expressionCaseClauseList"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFuncionEpsilon([NotNull] MiniGoParser.FuncionEpsilonContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expresionCasoClausula</c>
	/// labeled alternative in <see cref="MiniGoParser.expressionCaseClauseList"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpresionCasoClausula([NotNull] MiniGoParser.ExpresionCasoClausulaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expresionSwitch</c>
	/// labeled alternative in <see cref="MiniGoParser.expressionCaseClause"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpresionSwitch([NotNull] MiniGoParser.ExpresionSwitchContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expresionCase</c>
	/// labeled alternative in <see cref="MiniGoParser.expressionSwitchCase"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpresionCase([NotNull] MiniGoParser.ExpresionCaseContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>expresionDefault</c>
	/// labeled alternative in <see cref="MiniGoParser.expressionSwitchCase"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExpresionDefault([NotNull] MiniGoParser.ExpresionDefaultContext context) { return VisitChildren(context); }
}
} // namespace Generated
